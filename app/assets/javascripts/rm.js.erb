/* rm.js - Readership Map */

var ReaderMap = (function() {

/* Map variables */
var map, cities, markerSelected, markerHighlighted, infoWindow;

/* Timing variables */
var initialStartTime;
var dataStartTime, dataEndTime;
var virtualTime, lastDisplayTime;

/* Interval timers */
var queryTimer, displayTimer, displayOneTimer;

/* Data and display stacks */
var dataStack, displayStack;

/* This is called when the Google Map has loaded */
function start() {
  <% unless Rails.env.production? %>
  console.log("Starting");
  logState();
  <% end %>

  /* Initialize */
  initializeMap();
  initialStartTime = new Date();
  initialStartTime.setMinutes(initialStartTime.getMinutes() - 
                              queryDelay() - queryInterval() -
                              initialHistory());
  dataStartTime = new Date();
  dataStartTime.setMinutes(dataStartTime.getMinutes() -
                           queryDelay() - queryInterval(),
                           0, 0);
  dataEndTime = new Date(dataStartTime.getTime());
  virtualTime = new Date(dataStartTime.getTime());
  lastDisplayTime = new Date();
  queryTimer = setInterval(function() { query(0) }, minToMs(queryInterval()));
  displayTimer = setInterval(display, minToMs(displayInterval()));
  displayOneTimer = null;
  dataStack = [];
  displayStack = [];

  /* Make initial query for data */
  query(initialHistory());
}

function initializeMap() {
  var params = {
    center: { lat: 24, lng: 12 },
    zoom: 2,
    minZoom: 2,
    zoomControl: true,
    mapTypeControl: false,
    streetViewControl: false,
    styles: [
      {
        "featureType": "administrative",
        "elementType": "geometry.fill",
        "stylers": [
          { "visibility": "off" }
        ]
      },
      {
        "featureType": "administrative",
        "elementType": "labels",
        "stylers": [
          { "visibility": "off" }
        ]
      },
      {
        "featureType": "administrative.locality",
        "elementType": "labels",
        "stylers": [
          { "visibility": "on" }
        ]
      },
      {
        "featureType": "landscape",
        "elementType": "geometry",
        "stylers": [
          { "color": "#808080" },
          { "visibility": "on" }
        ]
      },
      {
        "featureType": "landscape",
        "elementType": "labels",
        "stylers": [
          { "visibility": "off" }
        ]
      },
      {
        "featureType": "road",
        "stylers": [
          { "visibility": "off" }
        ]
      },
      {
        "featureType": "transit",
        "stylers": [
          { "visibility": "off" }
        ]
      },
      {
        "featureType": "poi",
        "stylers": [
          { "visibility": "off" }
        ]
      },
      {
        "featureType": "water",
        "elementType": "labels",
        "stylers": [
          { "visibility": "off" }
        ]
      }
    ]
  };
  map = new google.maps.Map(document.getElementById("map"), params);
  markerSelected = null;
  markerHighlighted = null;
  infoWindow = new google.maps.InfoWindow({ maxWidth: 300 });
  infoWindow.addListener("closeclick", function() {
      unselectMarker(markerSelected);
    });
  cities = {};
  createClearButton();
}

/* Create button for clearing map */
function createClearButton() {
  var clearControlDiv = document.createElement("div");
  var control = document.createElement("div");
  control.id = "clear";
  control.title = "Clear the map";
  control.innerHTML = "Clear map";
  clearControlDiv.appendChild(control);
  control.addEventListener("click", function() {
      clear();
    });
  map.controls[google.maps.ControlPosition.TOP_RIGHT].push(clearControlDiv);
}

/* Clear all markers */
function clear() {
  for (var city in cities) {
    cities[city].setMap(null);
  }
  cities = {};
  initialStartTime = new Date();
}

/* Get most recent readership data, including
   'history' minutes of historical data */
function query(history) {
  <% unless Rails.env.production? %>
  console.log("Querying");
  logState();
  <% end %>

  dataStartTime = dataEndTime;
  dataEndTime = new Date();
  dataEndTime.setMinutes(dataEndTime.getMinutes() - queryDelay());
  var minutes = queryDelay() + queryInterval() + history;
  $.get("<%= Rails.application.routes.url_helpers.recent_data_path %>" +
      ".json?minutes=" + minutes,
    function(data) {
      handleQueryResponse(data, history > 0);
    });
}

function handleQueryResponse(response, withHistory) {
  <% unless Rails.env.production? %>
  console.log("Handling query response");
  logState();
  <% end %>

  if (response && !response.error &&
      response.rows && response.rows.length > 0) {

    for (var i = 0; i < response.rows.length; i++) {
      reader = readerFromRow(response.rows[i]);
      if (withHistory && reader.time < dataStartTime) {
        markOnMap(reader, false);
      } else if (reader.time >= dataStartTime && reader.time < dataEndTime) {
        dataStack.push(reader);
      }
    }

    virtualTime = new Date(dataStartTime.getTime());
    lastDisplayTime = new Date();

    display();
  }
  <% unless Rails.env.production? %>
  else {
    if (!response) {
      console.log("Data query response null");
    } else if (response.error) {
      console.log("Data query error");
    } else if (!response.rows) {
      console.log("Data query response has no rows member");
    } else if (response.rows.length <= 0) {
      console.log("Data query returned zero rows");
    }
  }
  <% end %>
}

/* Create a reader object from an array of data */
function readerFromRow(row) {
  return {
      time: new Date(Date.parse(row[0])),
      country: row[1],
      region: row[2],
      city: row[3],
      lat: parseFloat(row[4]),
      lng: parseFloat(row[5]),
      title: row[6],
      uri: row[7],
      activity: row[8],
      count: parseInt(row[9])
    };
}

/* Display data based on virtual time */
function display() {
  <% unless Rails.env.production? %>
  console.log("Displaying");
  logState();
  <% end %>

  var currentTime = new Date();
  virtualTime.setMilliseconds(virtualTime.getMilliseconds() +
                              Math.round(currentTime - lastDisplayTime));

  /* Flush any leftover data */
  while (displayStack.length > 0) {
    displayOne();
  }

  /* Put data onto intermediate stack, then onto display stack,
   * so that the correct order is maintained */
  var toDisplay = [];
  while (dataStack.length > 0 &&
         dataStack[dataStack.length - 1].time <= virtualTime) {
    toDisplay.push(dataStack.pop());
  }
  while (toDisplay.length > 0) {
    displayStack.push(toDisplay.pop());
  }

  if (displayStack.length > 0) {
    /* Set up to display multiple data separately, spaced
     * evenly over the display interval */
    if (displayStack.length > 1) {
      displayOneTimer = setInterval(displayOne,
        minToMs(displayInterval()) / displayStack.length);
    }
    displayOne();
  }

  lastDisplayTime = currentTime;
}

/* Display a single reader */
function displayOne() {
  <% unless Rails.env.production? %>
  console.log("Displaying one");
  logState();
  <% end %>

  if (displayStack.length > 0) {
    markOnMap(displayStack.pop(), true);
  }

  if (displayStack.length <= 0) {
    clearTimeout(displayOneTimer);
  }
}

/* Mark a reader on the map */
function markOnMap(reader, animate) {
  var city = cityKey(reader);
  if (!(city in cities)) {
    /* Create a new marker for the city */
    var params = {
        position: {
            lat: reader.lat,
            lng: reader.lng
          },
        animation: null,
        icon: markerPath(),
        opacity: 1.0,
        zIndex: 90 - reader.lat,
        rm_country: reader.country,
        rm_region: reader.region,
        rm_city: reader.city,
        rm_views: [],
        rm_downloads: []
      };
    var marker = new google.maps.Marker(params);

    marker.addListener("click", function() {
        if (marker == markerSelected) {
          unselectMarker(marker);
        } else {
          selectMarker(marker);
        }
      });
    marker.setMap(map);
    cities[city] = marker;
  }

  addReaderToCity(reader, city, animate);
}

/* Generate city key string associated with reader's city */
function cityKey(reader) {
  return reader.city + ":" + reader.lat + "," + reader.lng;
}

/* Add a reader to a city */
function addReaderToCity(reader, cityKey, animate) {
  if (reader.activity == "view") {
    cities[cityKey].rm_views.push(reader);
  } else {
    cities[cityKey].rm_downloads.push(reader);
  }
  if (cities[cityKey] == markerSelected) {
    /* Update info window */
    infoWindow.setContent(cityInfoHtml(cities[cityKey]));
  }
  if (animate) {
    /* Bounce marker three times */
    cities[cityKey].setAnimation(google.maps.Animation.BOUNCE);
    setTimeout(function() {
        cities[cityKey].setAnimation(null);
      }, 2100);
    highlightMarker(cities[cityKey]);
  }
}

/* Select marker (show info window) */
function selectMarker(marker) {
  if (marker != markerSelected) {
    infoWindow.setContent(cityInfoHtml(marker));
    infoWindow.open(map, marker);
    markerSelected = marker;
  }
}

/* Un-select marker (close info window) */
function unselectMarker(marker) {
  if (marker == markerSelected) {
    infoWindow.close();
    markerSelected = null;
  }
}

/* Highlight a marker by giving it a modified icon */
function highlightMarker(marker) {
  if (markerHighlighted && marker != markerHighlighted) {
    markerHighlighted.setIcon(markerPath());
  }
  if (marker != markerHighlighted) {
    marker.setIcon(markerHighlightedPath());
    markerHighlighted = marker;
  }
}

/* Generate reader HTML corresponding to marker */
function cityInfoHtml(marker) {
  var html = cityInfoHeader(marker);
  html += cityInfoStats(marker);
  if (marker.rm_views.length > 0) {
    html += cityInfoLastItem(marker, "view");
  }
  if (marker.rm_downloads.length > 0) {
    html += cityInfoLastItem(marker, "download");
  }
  return html;
}

function cityInfoHeader(marker) {
  var html = "<h1>" + marker.rm_city + ", ";
  if (marker.rm_country == "United States") {
    html += marker.rm_region;
  } else {
    html += marker.rm_country;
  }
  html += "</h1>";
  return html;
}

function cityInfoStats(marker) {
  var html = "<h2>";
  if (marker.rm_views.length > 0) {
    html += marker.rm_views.length + " view";
    if (marker.rm_views.length > 1) {
      html += "s";
    }
    if (marker.rm_downloads.length > 0) {
      html += ", ";
    }
  }
  if (marker.rm_downloads.length > 0) {
    html += marker.rm_downloads.length + " download";
    if (marker.rm_downloads.length > 1) {
      html += "s";
    }
  }
  html += " since " + initialStartTime.toLocaleTimeString() + "</h2>";
  return html;
}

function cityInfoLastItem(marker, activity) {
  var html = "<h3>Last " + activity + "ed</h3>";
  html += "<p>";
  var lastItem = (activity == "view") ?
    marker.rm_views[marker.rm_views.length - 1] :
    marker.rm_downloads[marker.rm_downloads.length - 1];
  if (lastItem.title) {
    if (lastItem.uri) {
      html += "<a href=\"http://" + lastItem.uri + "\"" +
      " title=\"" + lastItem.title.replace(/\"/g, "&quot;") +
      "\" target=\"_blank\">";
    }
    if (lastItem.title.length <= maxTitleLength()) {
      html += lastItem.title;
    } else {
      var lastSpace = lastItem.title.substring(0, maxTitleLength() - 1).lastIndexOf(" ");
      html += lastItem.title.substring(0, lastSpace) + "&hellip;";
    }
    if (lastItem.uri) {
      html += "</a>";
    }
  } else {
    if (lastItem.uri) {
      html += "<a href=\"http://" + lastItem.uri + "\"" +
        " title=\"(Untitled)\" target=\"_blank\">";
    }
    html += "(Untitled)";
    if (lastItem.uri) {
      html += "</a>";
    }
  }
  html += "</p>";
  return html;
}

function queryDelay() {
  return <%= ENV['RM_QUERY_DELAY'] ? ENV['RM_QUERY_DELAY'].to_i : 20 %>;
}

function queryInterval() {
  return <%= ENV['RM_QUERY_INTERVAL'] ? ENV['RM_QUERY_INTERVAL'].to_i : 10 %>;
}

function displayInterval() {
  return <%= ENV['RM_DISPLAY_INTERVAL'] ? ENV['RM_DISPLAY_INTERVAL'].to_i : 1 %>;
}

function initialHistory() {
  return <%= ENV['RM_INITIAL_HISTORY'] ? ENV['RM_INITIAL_HISTORY'].to_i : 30 %>;
}

function maxTitleLength() {
  return <%= ENV['RM_MAX_TITLE_LENGTH'] ? ENV['RM_MAX_TITLE_LENGTH'].to_i : 100 %>;
}

function markerPath() {
  return "<%= asset_path('marker.png') %>";
}

function markerHighlightedPath() {
  return "<%= asset_path('marker-highlighted.png') %>";
}

function minToMs(minutes) {
  return minutes * 60 * 1000;
}

<% unless Rails.env.production? %>

function logState() {
  console.log("  dataStartTime: " + dataStartTime);
  console.log("    dataEndTime: " + dataEndTime);
  console.log("    virtualTime: " + virtualTime);
  console.log("lastDisplayTime: " + lastDisplayTime);
  console.log("      dataStack: (bottom-to-top)");
  logStack(dataStack);
  console.log("   displayStack: (bottom-to-top)");
  logStack(displayStack);
  console.log("");
}

function logStack(stack) {
  if (!stack) {
    console.log("                 (null)");
    return;
  }
  if (stack.length >= 1) {
    logReader(stack, 0);
  }
  if (stack.length >= 2 && stack.length <= 4) {
    for (i = 1; i < stack.length; i++) {
      logReader(stack, i);
    }
  }
  if (stack.length >= 5) {
    console.log("                 ...");
    logReader(stack, stack.length - 2);
    logReader(stack, stack.length - 1);
  }
}

function logReader(stack, i) {
  console.log("                 " + 
              stack[i].time + " - " +
              stack[i].city);
}

<% end %>

return { start: start };

})();
