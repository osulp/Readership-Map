/* rm.js - Readership Map Prototype */

var ReaderMap = (function() {

/* Map variables */
var map, markers, markerSelected, baseInfoHtml;

/* Timing variables */
var dataStartTime, dataEndTime;
var virtualTime, lastDisplayTime;

/* Timing parameters */
var QUERY_DELAY = 600000; /* milliseconds */
var QUERY_INTERVAL = 600000;
var DISPLAY_INTERVAL = 60000;

/* Interval timers */
var queryTimer, displayTimer, displayOneTimer;

/* Data and display stacks */
var dataStack, displayStack;

/* Call this when ready for map to go live */
function start() {
  <% unless Rails.env.production? %>
  console.log("Starting");
  logState();
  <% end %>

  /* Initialize */
  initMap();
  dataStartTime = new Date();
  dataStartTime.setSeconds(0, 0);
  dataStartTime.setMilliseconds(dataStartTime.getMilliseconds() -
                                QUERY_DELAY -
                                QUERY_INTERVAL);
  dataEndTime = new Date(dataStartTime.getTime());
  virtualTime = new Date(dataStartTime.getTime());
  lastDisplayTime = new Date();
  queryTimer = setInterval(query, QUERY_INTERVAL);
  displayTimer = setInterval(display, DISPLAY_INTERVAL);
  displayOneTimer = null;
  dataStack = [];
  displayStack = [];

  /* Make initial query */
  query();
}

function initMap() {
  var params = {
    center: { lat: 42, lng: 11 },
    zoom: 1,
    minZoom: 1,
    zoomControl: false,
    mapTypeControl: false,
    streetViewControl: false,
    styles: [
      {
        "featureType": "administrative",
        "elementType": "geometry.fill",
        "stylers": [
          { "visibility": "off" }
        ]
      },
      {
        "featureType": "administrative",
        "elementType": "labels",
        "stylers": [
          { "visibility": "off" }
        ]
      },
      {
        "featureType": "administrative.locality",
        "elementType": "labels",
        "stylers": [
          { "visibility": "on" }
        ]
      },
      {
        "featureType": "landscape",
        "elementType": "geometry",
        "stylers": [
          { "color": "#808080" },
          { "visibility": "on" }
        ]
      },
      {
        "featureType": "landscape",
        "elementType": "labels",
        "stylers": [
          { "visibility": "off" }
        ]
      },
      {
        "featureType": "road",
        "stylers": [
          { "visibility": "off" }
        ]
      },
      {
        "featureType": "transit",
        "stylers": [
          { "visibility": "off" }
        ]
      },
      {
        "featureType": "poi",
        "stylers": [
          { "visibility": "off" }
        ]
      },
      {
        "featureType": "water",
        "elementType": "labels",
        "stylers": [
          { "visibility": "off" }
        ]
      }
    ]
  };
  map = new google.maps.Map(document.getElementById("map"), params);
  markers = [];
  markerSelected = null;
  baseInfoHtml = $("#map-info").html();
}

function query() {
  <% unless Rails.env.production? %>
  console.log("Querying");
  logState();
  <% end %>

  dataStartTime = dataEndTime;
  dataEndTime = new Date();
  dataEndTime.setMilliseconds(dataEndTime.getMilliseconds() -
                              QUERY_DELAY);
  $.get("<%= Rails.application.routes.url_helpers.recent_data_path %>" +
    ".json?last=30",
    function(data) {
      handleQueryResponse(data);
    });
}

function handleQueryResponse(response) {
  <% unless Rails.env.production? %>
  console.log("Handling query response");
  logState();
  <% end %>

  if (response && !response.error &&
      response.rows && response.rows.length > 0) {

    for (var i = 0; i < response.rows.length; i++) {
      reader = readerFromRow(response.rows[i]);
      if (readerShouldBeDisplayed(reader)) {
        dataStack.push(reader);
      }
    }

    virtualTime = new Date(dataStartTime.getTime());
    lastDisplayTime = new Date();

    display();
  }
  <% unless Rails.env.production? %>
  else {
    if (!response) {
      console.log("Data query response null");
    } else if (response.error) {
      console.log("Data query error: " + response.error.message);
    } else if (!response.rows) {
      console.log("Data query response has no rows member");
    } else if (response.rows.length <= 0) {
      console.log("Data query returned zero rows");
    }
  }
  <% end %>
}

function display() {
  <% unless Rails.env.production? %>
  console.log("Displaying");
  logState();
  <% end %>

  var currentTime = new Date();
  virtualTime.setMilliseconds(virtualTime.getMilliseconds() +
                              Math.round(currentTime - lastDisplayTime));

  /* Flush any leftover data */
  while (displayStack.length > 0) {
    displayOne();
  }

  /* Put data onto intermediate stack, then onto display stack,
   * so that the correct order is maintained */
  var toDisplay = [];
  while (dataStack.length > 0 &&
         dataStack[dataStack.length - 1].time <= virtualTime) {
    toDisplay.push(dataStack.pop());
  }
  while (toDisplay.length > 0) {
    displayStack.push(toDisplay.pop());
  }

  if (displayStack.length > 0) {
    /* Set up to display multiple data separately, spaced
     * evenly over the display interval */
    if (displayStack.length > 1) {
      displayOneTimer = setInterval(displayOne,
        DISPLAY_INTERVAL / displayStack.length);
    }
    displayOne();
  }

  lastDisplayTime = currentTime;
}

/* Display a single reader */
function displayOne() {
  <% unless Rails.env.production? %>
  console.log("Displaying one");
  logState();
  <% end %>

  if (displayStack.length > 0) {
    markOnMap(displayStack.pop());
  }

  if (displayStack.length <= 0) {
    clearTimeout(displayOneTimer);
  }
}

/* Mark a reader on the map */
function markOnMap(reader) {
  var params = {
      position: {
          lat: reader.lat,
          lng: reader.lng
        },
      icon: "<%= asset_path('marker.png') %>",
      animation: google.maps.Animation.DROP,
      rm_country: reader.country,
      rm_region: reader.region,
      rm_city: reader.city,
      rm_title: reader.title,
      rm_uri: reader.uri
    };
  var marker = new google.maps.Marker(params);

  marker.addListener("click", function() {
      if (marker != markerSelected) {
        if (markerSelected) {
          markerSelected.setIcon("<%= asset_path('marker.png') %>");
        }
        $("#map-info").html(readerInfoHtml(marker));
        marker.setIcon("<%= asset_path('marker-selected.png') %>");
        markerSelected = marker;
      } else {
        $("#map-info").html(baseInfoHtml);
        markerSelected = null;
      }
    });
  marker.addListener("mouseover", function() {
      $("#map-info").html(readerInfoHtml(marker));
      marker.setIcon("<%= asset_path('marker-selected.png') %>");
    });
  marker.addListener("mouseout", function() {
      if (markerSelected) {
        $("#map-info").html(readerInfoHtml(markerSelected));
      } else {
        $("#map-info").html(baseInfoHtml);
      } 
      if (marker != markerSelected) {
        marker.setIcon("<%= asset_path('marker.png') %>");
      }
    });
  marker.setMap(map);

  /* Store references in case map needs to be cleared */
  markers.push(marker);
}

function readerInfoHtml(marker) {
  var infoHtml = "<span class=\"title\">";
  if (marker.rm_title) {
    if (marker.rm_uri) {
      infoHtml += "<a href=\"http://" + marker.rm_uri + "\""
        + " alt=\"" + marker.rm_title + "\" target=\"_blank\">";
    }
    infoHtml += marker.rm_title;
    if (marker.rm_uri) {
      infoHtml += "</a>";
    }
  } else {
    if (marker.rm_uri) {
      infoHtml += "<a href=\"http://" + marker.rm_uri + "\""
        + " alt=\"Untitled\" target=\"_blank\">";
    }
    infoHtml += "(Untitled)";
    if (marker.rm_uri) {
      infoHtml += "</a>";
    }
  }
  infoHtml += "</span>";
  if (marker.rm_city) {
    infoHtml += "<span class=\"location\">";
    infoHtml += marker.rm_city;
    if (marker.rm_country == "United States") {
      infoHtml += marker.rm_region ? ", " + marker.rm_region : "";
    }
    else {
      infoHtml += marker.rm_country ? ", " + marker.rm_country : "";
    }
    infoHtml += "</span>";
  }
  return infoHtml;
}

function readerFromRow(row) {
  return {
      time: new Date(Date.parse(row[0])),
      country: row[1] != "(not set)" ? row[1] : null,
      region: row[2] != "(not set)" ? row[2] : null,
      city: row[3] != "(not set)" ? row[3] : null,
      lat: parseFloat(row[4]),
      lng: parseFloat(row[5]),
      title: row[6],
      uri: row[7],
      count: parseInt(row[8])
    };
}

function readerShouldBeDisplayed(reader) {
  if (reader.time < dataStartTime || reader.time >= dataEndTime) {
    return false;
  }
  return true;
}

<% unless Rails.env.production? %>

function logState() {
  console.log("  dataStartTime: " + dataStartTime);
  console.log("    dataEndTime: " + dataEndTime);
  console.log("    virtualTime: " + virtualTime);
  console.log("lastDisplayTime: " + lastDisplayTime);
  console.log("      dataStack: (bottom-to-top)");
  logStack(dataStack);
  console.log("   displayStack: (bottom-to-top)");
  logStack(displayStack);
  console.log("");
}

function logStack(stack) {
  if (!stack) {
    console.log("                 (null)");
    return;
  }
  if (stack.length >= 1) {
    logReader(stack, 0);
  }
  if (stack.length >= 2 && stack.length <= 4) {
    for (i = 1; i < stack.length; i++) {
      logReader(stack, i);
    }
  }
  if (stack.length >= 5) {
    console.log("                 ...");
    logReader(stack, stack.length - 2);
    logReader(stack, stack.length - 1);
  }
}

function logReader(stack, i) {
  console.log("                 " + 
              stack[i].time + " - " +
              stack[i].city);
}

<% end %>

return { start: start };

})();
